name: windows/rebuild
description: 'Rebuilds a solution on Windows.'
inputs:
  configuration:
    description: 'The configuration (Debug, Release, etc.) to build.'
    required: true
  solution_directory:
    description: 'The path where the MSVC solution is located.'
    required: true
runs:
  using: 'composite'
  steps:
    - run: |
        $max_cpu_count = [Math]::Ceiling((Get-CimInstance Win32_ComputerSystem).NumberOfLogicalProcessors / 4)
        ls ${{ inputs.solution_directory }}\*.sln | % {
          &"${{ env.PRINCIPIA_MSBUILD_PATH }}"                `
          /target:"Clean;Build"                               `
          /maxCpuCount:$max_cpu_count                         `
          /property:Configuration=${{ inputs.configuration }} `
          /property:Platform=x64                              `
          /property:UseMultiToolTask=true                     `
          /property:EnforceProcessCountAcrossBuilds=true      `
          /distributedFileLogger	                            `
          /consoleloggerparameters:ShowEventId                `
          $_
          foreach ($f in ls "MSBuild*.log") {
            $last_error = ''
            $skip_note = $false
            $done = $false
            Get-Content $f | % {
              $id = ''
              $prefix = '---     '
              if ($_ -match "^(.*)\s*\(TaskId:(?<id>\d+)\)$") {
                $id = $Matches.id
                $prefix = "TSK" + $id.PadLeft(5)
                $_ = $Matches.1
              } elseif ($_ -match "^(.*)\s*\(TargetId:(?<id>\d+)\)$") {
                $prefix = "TGT" + $id.PadLeft(5)
                $_ = $Matches.1
              }
              Write-Output "$prefix $_"
              if ($done -or $_ -eq 'Build FAILED.') {
                $done = $true
                return
              }
              if ($_ -match "\s*(?<location>(?<file>[^>]*)\((?<line>\d+),(?<column>\d+)\)): (?<title>(?<type>error|warning|message|note)[^:]*): (?<message>.*)") {
                if ($Matches.type -in @('error', 'warning')) {
                  if ($last_error) {
                    Write-Output $last_error
                  }
                  $last_error = $null
                  $skip_note = $false
                  if ($Matches.title -eq 'error C2220') {
                    return
                  }
                  if ($Matches.file.StartsWith($PWD)) {
                    $last_error = "::$($Matches.type) file=$($Matches.file),line=$($Matches.line),col=$($Matches.column),title=$($Matches.title)::$($Matches.message)"
                  } else {
                    $last_error = "***::$($Matches.type) file={file},line={line},col={column},title=$($Matches.title)::$($Matches.location):%0A$($Matches.message)"
                  }
                } elseif ($last_error) {
                  if ($Matches.file.StartsWith($PWD)) {
                    if ($last_error.StartsWith('***') -and ($_.Contains("see reference") -or $_.Contains("see the first reference"))) {
                      $last_error = $last_error.Substring(3).Replace('{file}', $Matches.file).Replace('{line}', $Matches.line).Replace('{column}', $Matches.column)
                    }
                    $last_error += "%0A$($Matches.title): $($Matches.message)"
                    $skip_note = $false
                  } else {
                    $skip_note = $true
                  }
                } else {
                  Write-Output "::$($Matches.type -replace 'message|note','error') file=$($Matches.file),line=$($Matches.line),col=$($Matches.column),title=$($Matches.title)::$($Matches.message)"
                }
              } elseif ($last_error -and -not $skip_note) {
                if ($_.StartsWith('                 ')) {
                  $last_error += "%0A$_"
                } else {
                  Write-Output $last_error
                  $last_error = $null
                  $skip_note = $false
                }
              }
            }
            Write-Output $last_error.Values
          }
        }
      shell: pwsh
      env:
        PRINCIPIA_MSBUILD_PATH: C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe

name: windows/rebuild
description: 'Rebuilds a solution on Windows.'
inputs:
  configuration:
    description: 'The configuration (Debug, Release, etc.) to build.'
    required: true
  solution_directory:
    description: 'The path where the MSVC solution is located.'
    required: true
runs:
  using: 'composite'
  steps:
    - run: |
        $max_cpu_count = [Math]::Ceiling((Get-CimInstance Win32_ComputerSystem).NumberOfLogicalProcessors / 4)
        ls ${{ inputs.solution_directory }}\*.sln | % {
          $last_error = @{}
          $skip_note = @{}
          $done = $false
          $id = 0
          $tool = @{}
          &"${{ env.PRINCIPIA_MSBUILD_PATH }}"                `
          /target:"Clean;Build"                               `
          /maxCpuCount:$max_cpu_count                         `
          /property:Configuration=${{ inputs.configuration }} `
          /property:Platform=x64                              `
          /property:UseMultiToolTask=true                     `
          /property:EnforceProcessCountAcrossBuilds=true      `
          $_
          | % {
            Write-Output $_
            if ($done -or $_ -eq 'Build FAILED.') {
              $done = $true
              return
            }
            if ($_ -match '^\s*(?<id>\d+)>') {
              $id = $Matches.id
            }
            if ($_ -match '^(       |\s*\d+>)(?<tool>\w+):$') {
              $tool[$id] = $Matches.tool
            }
            if ($key -ne $id + $tool[$id]) {
              $key = $id + $tool[$id]
              Write-Output ">>> $key"
            }
            if ($_ -match "\s*(?<location>(?<file>[^>]*)\((?<line>\d+),(?<column>\d+)\)): (?<title>(?<type>error|warning|message|note)[^:]*): (?<message>.*)") {
              if ($Matches.type -in @('error', 'warning')) {
                if ($last_error[$key]) {
                  Write-Output $last_error[$key]
                }
                $last_error[$key] = $null
                $skip_note[$key] = $false
                if ($Matches.title -eq 'error C2220') {
                  return
                }
                if ($Matches.file.StartsWith($PWD)) {
                  $last_error[$key] = "::$($Matches.type) file=$($Matches.file),line=$($Matches.line),col=$($Matches.column),title=$($Matches.title)::$($Matches.message)"
                } else {
                  $last_error[$key] = "--::$($Matches.type) file={file},line={line},col={column},title=$($Matches.title)::$($Matches.location):%0A$($Matches.message)"
                }
              } elseif ($last_error[$key]) {
                if ($Matches.file.StartsWith($PWD)) {
                  if ($last_error[$key].StartsWith('--') -and ($_.Contains("see reference") -or $_.Contains("see the first reference"))) {
                    $last_error[$key] = $last_error[$key].Substring(2).Replace('{file}', $Matches.file).Replace('{line}', $Matches.line).Replace('{column}', $Matches.column)
                  }
                  $last_error[$key] += "%0A$($Matches.title): $($Matches.message)"
                } else {
                  $skip_note[$key] = $true
                }
              } else {
                Write-Output "::$($Matches.type -replace 'message|note','error') file=$($Matches.file),line=$($Matches.line),col=$($Matches.column),title=$($Matches.title)::$($Matches.message)"
              }
            } elseif ($last_error[$key] -and -not $skip_note[$key]) {
              if ($_.StartsWith('                 ')) {
                $last_error[$key] += "%0A$_"
              } else {
                Write-Output $last_error[$key]
                $last_error[$key] = $null
                $skip_note[$key] = $false
              }
            }
          }
          Write-Output $last_error.Values 
        }
      shell: pwsh
      env:
        PRINCIPIA_MSBUILD_PATH: C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe
